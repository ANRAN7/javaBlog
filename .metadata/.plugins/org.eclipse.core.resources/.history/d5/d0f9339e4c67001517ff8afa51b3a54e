package com.rlovep.dom4j;

import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.Element;
import org.dom4j.Node;
import org.dom4j.io.SAXReader;
import org.hamcrest.core.IsInstanceOf;
import org.junit.Test;

/**
 * 
* @ClassName: ReadXml
* @Description: TODO(这里用一句话描述这个类的作用)
* @author peace w_peace@163.com 
* @date 30 Sep 2015 10:46:08 am
*
 */
public class ReadXml {
	private  List<Element> list=new ArrayList<Element>();
	
	/**
	 * 
	* @Title: readnode 
	* @Description: 获取所有节点,只得到一层节点  :void   
	* @throws 
	* @author peace w_peace@163.com
	 */
	@Test
	public void readFirstnode(){
		
		try {
			//1.读取xml文档，返回Document对象
			SAXReader reader =new SAXReader();
			Document doc=reader.read(new File("./src/student.xml"));
			//得到当前文档的所有子节点对象(不包含孙以下的节点)
			Iterator<Node> it=doc.nodeIterator();
			while(it.hasNext()){
				Node node=it.next();
				String name=node.getName();
				System.out.println(name+"----");
				//判断节点是否为标签，如果为标签就得到标签下的子节点；
				if(node instanceof Element){
					//获得标签下的子节点
					Iterator<Node> it2=((Element) node).nodeIterator();
					   while(it2.hasNext()){
						  Node el=it2.next();
						   System.out.println(el.getName());
					   }
							}
			}
		} catch (DocumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	/**
	 * 
	* @Title: readAllNide 
	* @Description: 获得所有标签  :void   
	* @throws 
	* @author peace w_peace@163.com
	 */
	@Test
	public void readAllNide(){
		try {
			//读取xml文档
			SAXReader reader=new SAXReader();
			Document doc=reader.read("./src/student.xml");
			//获得根标签
			Element rootELem=doc.getRootElement();
			//获得根标签下的所有标签，并保存到list中
			getChildNodes(rootELem);
			System.out.println(list);
		} catch (DocumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
   private void getChildNodes(Element elem){
	   //保持标签
	   list.add(elem);
	   System.out.println(elem.getName());
	   Iterator<Node> it=elem.nodeIterator();
	   while(it.hasNext()){
		   Node node=it.next();
		   //如果节点为标签，进行递归
		   if(node instanceof Element){
			   getChildNodes((Element)node);
		   }
	   }
   }
	public static void main(String[] args) {
		// TODO Auto-generated method stub
        SAXReader reader=new SAXReader();
        try {
			Document doc=reader.read(new File("./src/student.xml"));
			System.out.println(doc);
		} catch (DocumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

}
